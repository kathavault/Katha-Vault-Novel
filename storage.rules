
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Profile Pictures
    // Path example: users/user_abc_123/avatars/profile.jpg
    match /users/{userId}/avatars/{imageFilename} {
      // Allow anyone to read profile pictures (for display on profiles)
      allow read: if true;

      // Allow authenticated users to write (upload, update, delete)
      // THEIR OWN profile picture.
      allow write: if request.auth != null && request.auth.uid == userId
                      && request.resource.size < 2 * 1024 * 1024 // Max 2MB for profile pictures
                      && request.resource.contentType.matches('image/.*'); // Only allow image types
    }

    // Novel Covers
    // Path example: users/admin_user_xyz/novel_covers/novel_123/cover.jpg
    // Here, uploaderUserId would be the admin's UID if an admin uploads the cover.
    match /users/{uploaderUserId}/novel_covers/{novelId}/{imageFilename} {
      // Allow anyone to read novel covers (for display in library, story pages)
      allow read: if true;

      // Allow authenticated users (e.g., an admin) to write novel covers
      // under their own uploaderUserId path.
      allow write: if request.auth != null && request.auth.uid == uploaderUserId
                      && request.resource.size < 5 * 1024 * 1024 // Max 5MB for novel covers
                      && request.resource.contentType.matches('image/.*'); // Only allow image types
    }

    // --- Notes ---
    // 1. Default Deny: If no rule above matches a path, access is denied by default.
    //    This is generally a good security practice.
    // 2. File Validation: The rules above include basic checks for file size and image content type.
    //    You can adjust the `request.resource.size` (in bytes) as needed.
    // 3. Admin Roles: These rules assume an "admin" is just a regular authenticated user who
    //    has application-level privileges to upload covers. If you implement more formal
    //    admin roles using Firebase Custom Claims, the `allow write` conditions for novel covers
    //    could be made more specific (e.g., `request.auth.token.admin == true`).
    // 4. Testing: Always test your rules thoroughly using the Firebase Console's Storage Rules Playground.
  }
}
